const jwt = require("jsonwebtoken");
const cookieConfig = require("../configs/cookieConfig");

require("dotenv").config();
function verifyRefreshToken(req, res, next) {
  try {
    const { refreshToken } = req.cookies;
    if (!refreshToken) {
      throw { name: 'TokenError', message: 'No refresh token found', status: 401 };
    }
    if (typeof refreshToken !== 'string' || !refreshToken.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/)) {
      throw { name: 'TokenError', message: 'Invalid token format', status: 401 };
    }
    const decoded = jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET);
    if (decoded.exp && Date.now() >= decoded.exp * 1000) {
      return res.status(401).json({ error: "Token has expired" });
    }
    if (!decoded.sessionId) {
      throw { name: 'SessionError', message: 'Invalid session', status: 401 };
    }
    // Validate session ID against active sessions
    const isValidSession = await validateSession(decoded.sessionId);
    if (!isValidSession) {
      throw { name: 'SessionError', message: 'Session expired or invalid', status: 401 };
    }
    res.locals.user = decoded.user;
    res.locals.sessionId = decoded.sessionId;
    next();
  } catch (error) {
    console.error("Refresh token verification failed:", {
      error: error.name,
      message: error.message,
      token: req.cookies.refreshToken ? '***' : 'none',
      timestamp: new Date().toISOString()
    });
    res.clearCookie("refreshToken", cookieConfig).status(error.status || 401).json({ error: error.message });
  }
}

module.exports = verifyRefreshToken;
