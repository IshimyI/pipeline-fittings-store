const jwt = require("jsonwebtoken");
const cookieConfig = require("../configs/cookieConfig");

require("dotenv").config();
function verifyRefreshToken(req, res, next) {
  try {
    const { refreshToken } = req.cookies;
    if (!refreshToken) {
      throw new TokenError('No refresh token found');
    }
    if (typeof refreshToken !== 'string' || !refreshToken.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/)) {
      throw new TokenError('Invalid token format');
    }
    const decoded = jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET);
    if (decoded.exp && Date.now() >= decoded.exp * 1000) {
      return res.status(401).json({ error: "Token has expired" });
    }
    if (!decoded.sessionId) {
      throw { name: 'SessionError', message: 'Invalid session', status: 401 };
    }
    // Validate session ID against active sessions
    const isValidSession = await validateSession(decoded.sessionId);
    if (!isValidSession) {
      throw new SessionError('Session expired or invalid');
    }
    // Check for concurrent sessions limit
    const activeSessions = await getUserActiveSessions(decoded.user.id);
    if (activeSessions.length > process.env.MAX_CONCURRENT_SESSIONS) {
      throw new SessionError('Maximum concurrent sessions exceeded');
    }
    res.locals.user = decoded.user;
    res.locals.sessionId = decoded.sessionId;
    next();
  } catch (error) {
    const logData = {
      error: error.name,
      message: error.message,
      token: req.cookies.refreshToken ? '***' : 'none',
      timestamp: new Date().toISOString(),
      userId: decoded?.user?.id,
      requestIP: req.ip,
      userAgent: req.headers['user-agent']
    };
    console.error("Refresh token verification failed:", logData);
    res.clearCookie("refreshToken", cookieConfig).status(error.status || 401).json({ error: error.message });
  }
}

module.exports = verifyRefreshToken;
